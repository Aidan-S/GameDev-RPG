//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Code/playerActionControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerActionControls"",
    ""maps"": [
        {
            ""name"": ""Basic"",
            ""id"": ""d58239ab-c63b-4a6d-8ff2-843e804940d1"",
            ""actions"": [
                {
                    ""name"": ""xButton"",
                    ""type"": ""Button"",
                    ""id"": ""0c077aa9-cf56-4239-a95a-d6cea0d4a18d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""yButton"",
                    ""type"": ""Button"",
                    ""id"": ""0394ebc7-1b3a-4350-8d8d-17e3a26ed3a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""aButton"",
                    ""type"": ""Button"",
                    ""id"": ""005a84ec-09d4-459b-9319-7769f6593cdf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""bButton"",
                    ""type"": ""Button"",
                    ""id"": ""16dfea11-ca91-456e-ade3-6807d155ba45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""45666870-4eec-483d-a345-27b499b7de68"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""450f6766-edb8-4bc1-8f6a-0b1c2361f65a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""xButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba457014-9a23-4741-8fbe-0c711b1b65fd"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""yButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d81172a2-fe92-4ea2-b1b0-315af95c7435"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93652a51-2d9f-4d39-abdc-0ed0396ed1d3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""bButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aceaa418-d96b-4cfb-ac44-2a305c8cdccc"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""bButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b31cda3-cbbc-409b-9e39-2aa4c3f4b7f7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Basic
        m_Basic = asset.FindActionMap("Basic", throwIfNotFound: true);
        m_Basic_xButton = m_Basic.FindAction("xButton", throwIfNotFound: true);
        m_Basic_yButton = m_Basic.FindAction("yButton", throwIfNotFound: true);
        m_Basic_aButton = m_Basic.FindAction("aButton", throwIfNotFound: true);
        m_Basic_bButton = m_Basic.FindAction("bButton", throwIfNotFound: true);
        m_Basic_Move = m_Basic.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Basic
    private readonly InputActionMap m_Basic;
    private IBasicActions m_BasicActionsCallbackInterface;
    private readonly InputAction m_Basic_xButton;
    private readonly InputAction m_Basic_yButton;
    private readonly InputAction m_Basic_aButton;
    private readonly InputAction m_Basic_bButton;
    private readonly InputAction m_Basic_Move;
    public struct BasicActions
    {
        private @PlayerActionControls m_Wrapper;
        public BasicActions(@PlayerActionControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @xButton => m_Wrapper.m_Basic_xButton;
        public InputAction @yButton => m_Wrapper.m_Basic_yButton;
        public InputAction @aButton => m_Wrapper.m_Basic_aButton;
        public InputAction @bButton => m_Wrapper.m_Basic_bButton;
        public InputAction @Move => m_Wrapper.m_Basic_Move;
        public InputActionMap Get() { return m_Wrapper.m_Basic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicActions set) { return set.Get(); }
        public void SetCallbacks(IBasicActions instance)
        {
            if (m_Wrapper.m_BasicActionsCallbackInterface != null)
            {
                @xButton.started -= m_Wrapper.m_BasicActionsCallbackInterface.OnXButton;
                @xButton.performed -= m_Wrapper.m_BasicActionsCallbackInterface.OnXButton;
                @xButton.canceled -= m_Wrapper.m_BasicActionsCallbackInterface.OnXButton;
                @yButton.started -= m_Wrapper.m_BasicActionsCallbackInterface.OnYButton;
                @yButton.performed -= m_Wrapper.m_BasicActionsCallbackInterface.OnYButton;
                @yButton.canceled -= m_Wrapper.m_BasicActionsCallbackInterface.OnYButton;
                @aButton.started -= m_Wrapper.m_BasicActionsCallbackInterface.OnAButton;
                @aButton.performed -= m_Wrapper.m_BasicActionsCallbackInterface.OnAButton;
                @aButton.canceled -= m_Wrapper.m_BasicActionsCallbackInterface.OnAButton;
                @bButton.started -= m_Wrapper.m_BasicActionsCallbackInterface.OnBButton;
                @bButton.performed -= m_Wrapper.m_BasicActionsCallbackInterface.OnBButton;
                @bButton.canceled -= m_Wrapper.m_BasicActionsCallbackInterface.OnBButton;
                @Move.started -= m_Wrapper.m_BasicActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BasicActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BasicActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_BasicActionsCallbackInterface = instance;
            if (instance != null)
            {
                @xButton.started += instance.OnXButton;
                @xButton.performed += instance.OnXButton;
                @xButton.canceled += instance.OnXButton;
                @yButton.started += instance.OnYButton;
                @yButton.performed += instance.OnYButton;
                @yButton.canceled += instance.OnYButton;
                @aButton.started += instance.OnAButton;
                @aButton.performed += instance.OnAButton;
                @aButton.canceled += instance.OnAButton;
                @bButton.started += instance.OnBButton;
                @bButton.performed += instance.OnBButton;
                @bButton.canceled += instance.OnBButton;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public BasicActions @Basic => new BasicActions(this);
    public interface IBasicActions
    {
        void OnXButton(InputAction.CallbackContext context);
        void OnYButton(InputAction.CallbackContext context);
        void OnAButton(InputAction.CallbackContext context);
        void OnBButton(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
